// Download and save the file from:
// https://cdn.jsdelivr.net/npm/lamejs@1.2.1/lame.all.js

// Or use this command:
// curl -L https://cdn.jsdelivr.net/npm/lamejs@1.2.1/lame.all.js > public/lib/lame.min.js 

// Initialize lamejs in worker scope
(function(global) {
  // Create namespace
  if (!global.lamejs) {
    global.lamejs = {
      version: '1.2.1'
    };
  }

  // Store original Mp3Encoder if it exists
  const originalEncoder = global.lamejs.Mp3Encoder;

  // Create initialization promise
  let initPromise = null;
  let isInitialized = false;

  // Add initialization helper
  global.initializeLamejs = function() {
    if (initPromise) return initPromise;
    
    initPromise = new Promise((resolve, reject) => {
      try {
        // Restore or create encoder
        if (originalEncoder) {
          global.lamejs.Mp3Encoder = originalEncoder;
        }
        
        // Test encoder
        const testEncoder = new global.lamejs.Mp3Encoder(2, 44100, 128);
        if (testEncoder && typeof testEncoder.encodeBuffer === 'function') {
          isInitialized = true;
          console.log('Lamejs initialized successfully');
          resolve();
        } else {
          reject(new Error('Invalid encoder instance'));
        }
      } catch (error) {
        reject(error);
      }
    });
    
    return initPromise;
  };

  // Export initialization status
  Object.defineProperty(global.lamejs, 'isInitialized', {
    get: () => isInitialized
  });
})(self);

// The actual lamejs implementation will be appended here 